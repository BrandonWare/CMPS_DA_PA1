<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>CMPS 260: Module 2 Programming Assignment</title>
<style>* { font-family: monospace; }</style>
<script>

// NOTE: You must implement the data structures using the no prototype approach.
//       This is what the book uses, so you can copy it.
//       See also: https://it.pointpark.edu/tutorials/no-prototype-vs-prototype/

// NOTE: Please review the following links regularly:
//       https://it.pointpark.edu/tutorials/arrays-vs-objects/
//       https://it.pointpark.edu/tutorials/no-prototype-vs-prototype/
//       https://it.pointpark.edu/tutorials/implementation-vs-interface/

//--------------------------//
// The stack data structure //
//--------------------------//
console.log("The stack data structure");

// 1. Implement the stack data structure described in the book. Instead of
//    using 'let items = [];' use 'var items = []'. Note that this
//    implementation does not use the prototype (see project).

function Stack() {
  var items = [];

  this.push = function(element) {
    items.push(element);
  };

  this.pop = function() {
    return items.pop();
  };

  this.peek = function() {
    return items[items.length - 1];
  };

  this.isEmpty = function() {
    return items.length === 0;
  };

  this.size = function() {
    return items.length;
  };

  this.clear = function() {
    items = [];
  };

  this.print = function() {
    console.log(items.toString());
  };
}

// 2. Write a simple test program that shows your stack works.
var stack = new Stack();
stack.push(5);
stack.push(10);
stack.push(15);
console.log("Stack after pushes:");
stack.print();
console.log("Top item is:", stack.peek());
stack.pop();
console.log("After popping one item:");
stack.print();

//----------------------------------//
// ECMAScript 6 and the Stack class //
//----------------------------------//
console.log("ECMAScript 6 and the Stack class");

// Skip.

//-------------------------------//
// Solving problems using stacks //
//-------------------------------//
console.log("Solving problems using stacks");

// 1. Use the prompt to ask for a decimal number. Then write a loop that divides
//    the number by two in every iteration and prints the remainder (0 or 1).
//    For example, if the number is 5 the remainder is 1 and the number in the
//    next iteration should be 2 (5/2 rounded down).

var num = 5;
console.log("Decimal number:", num);
while (num > 0) {
  var rem = Math.floor(num % 2);
  console.log(rem);
  num = Math.floor(num / 2);
}

// 2. The algorithm in (1) can be used to convert a decimal number to a binary
//    number but there is one issue. What is the problem?

// 3. Solve the problem in (2) using a stack.
function decimalToBinary(decimal) {
  var remStack = new Stack();
  var num = decimal;
  var rem;
  var binaryString = "";

  while (num > 0) {
    rem = Math.floor(num % 2);
    remStack.push(rem);
    num = Math.floor(num / 2);
  }

  while (!remStack.isEmpty()) {
    binaryString += remStack.pop().toString();
  }

  return binaryString;
}

console.log("Binary of 5 is:", decimalToBinary(5));
console.log("Binary of 25 is:", decimalToBinary(25));

//--------------------------//
// The queue data structure //
//--------------------------//
console.log("The queue data structure");

// 1. Describe the difference between a stack and a queue. Give one example
//    where a stack is appropriate and one example where a queue is
//    appropriate (that has not yet been discussed in class).

//------------------//
// Creating a queue //
//------------------//
console.log("Creating a queue");

function Queue() {
  var items = [];

  this.enqueue = function(element) {
    items.push(element);
  };

  this.dequeue = function() {
    return items.shift();
  };

  this.front = function() {
    return items[0];
  };

  this.isEmpty = function() {
    return items.length === 0;
  };

  this.size = function() {
    return items.length;
  };

  this.print = function() {
    console.log(items.toString());
  };
}

//--------------------//
// The priority queue //
//--------------------//
console.log("The priority queue");

function QueueElement(element, priority) {
  this.element = element;
  this.priority = priority;
}

function PriorityQueue() {
  var items = [];

  this.enqueue = function(element, priority) {
    var queueElement = new QueueElement(element, priority);
    var added = false;

    for (var i = 0; i < items.length; i++) {
      if (queueElement.priority < items[i].priority) {
        items.splice(i, 0, queueElement);
        added = true;
        break;
      }
    }

    if (!added) {
      items.push(queueElement);
    }
  };

  this.dequeue = function() {
    return items.shift();
  };

  this.front = function() {
    return items[0];
  };

  this.isEmpty = function() {
    return items.length === 0;
  };

  this.print = function() {
    for (var i = 0; i < items.length; i++) {
      console.log(`${items[i].element} - ${items[i].priority}`);
    }
  };
}

// Test Priority Queue
var pq = new PriorityQueue();
pq.enqueue("Low priority task", 5);
pq.enqueue("Medium task", 3);
pq.enqueue("High priority task", 1);
console.log("Priority Queue:");
pq.print();
console.log("Dequeued item:", pq.dequeue().element);
pq.print();

//---------------------------------//
// The circular queue - Hot Potato //
//---------------------------------//
console.log("The circular queue - Hot Potato");

function hotPotato(nameList, num) {
  var queue = new Queue();

  for (var i = 0; i < nameList.length; i++) {
    queue.enqueue(nameList[i]);
  }

  while (queue.size() > 1) {
    for (var j = 0; j < num; j++) {
      queue.enqueue(queue.dequeue());
    }
    var out = queue.dequeue();
    console.log(out + " is out of the game completely.");
  }

  return queue.dequeue();
}

// Test Hot Potato
var names = ["Brandon", "Jake", "Mia", "Liam", "Emma"];
var winner = hotPotato(names, 3);
console.log("The Winner is:", winner);

</script>
</head>
<body>
  See console!
</body>
</html>
