<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>CMPS 260: Module 1 Programming Assignment</title>
<style>* { font-family: monospace; }</style>
<script>

// NOTE: You can enter both code and explanations. For an explanation, start
//       the line with '//' which indicates a comment.

// NOTE: console.log prints text to the browser console that you can enable
//       to see the output. It is a little bit more convenient than alert so
//       we will use it most of the time.

// NOTE: Please review the following links regularly:
//       https://it.pointpark.edu/tutorials/arrays-vs-objects/
//       https://it.pointpark.edu/tutorials/no-prototype-vs-prototype/
//       https://it.pointpark.edu/tutorials/implementation-vs-interface/



//----------------------------//
// Setting up the environment //
//----------------------------//
console.log("Setting up the environment");

// 1. Open this file in the browser.
// 2. Make sure to enable the developer tools.
// 3. Install Atom.
// 4. Change the content of the HTML body element from TODO to See Console!
// 5. Reload the file in the browser.
// 6. Copy this file and index.html to a new directory in your jail.
// 7. Homework submissions will include a link to a file in your jail.
// 8. Submit this file when you are done.


//-------------------//
// JavaScript basics //
//-------------------//
console.log("JavaScript basics");

// 1. Search the web to find the difference between static and dynamic typing.
// Static typing = variable types stay the same. Dynamic typing = they can change while the program runs.

// 2. Define a variable and initialized it to the string Hello World!
let myString = "Hello World!";

// 3. Print the content of the variable to the console (use console.log()).
console.log(myString);

// 4. Alert the content of the variable to the screen.
alert(myString);

// 5. Predict what the following code will print (write it down), then try it.
var myVariable = "global";
var myOtherVariable = "global";

function myFunction() {
  var myVariable = "local";
  return myVariable;
}

function myOtherFunction() {
  myOtherVariable = "local";
  return myOtherVariable;
}

console.log(myVariable);       // Should print "global"
console.log(myFunction());     // Should print "local"
console.log(myOtherVariable);  // Should print "global"
console.log(myOtherFunction()); // Should print "local"
console.log(myOtherVariable);  // Should print "local"

// 6. Figure out what the & operator does.
// It’s a bitwise AND — it compares each bit of two numbers.
// Example: 10 & 5 = 0, 10 & 6 = 2 (because only certain bits match).

// 7. What is the difference between == and ===? Give an example.
// == just compares values, === compares both value and type.

console.log(5 == "5");  // true
console.log(5 === "5"); // false



//--------------------//
// Control structures //
//--------------------//
console.log("Control structures");

// 1. Write an if statement to check if a year is a leap year and print it to
//    the console.
var year = 2016;
if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
  console.log(year + " is a leap year.");
} else {
  console.log(year + " is not a leap year.");
}

// 2. Write a loop to calculate n! (n factorial) and print it to the console.
var n = 10;
var factorial = 1;
for (var i = 1; i <= n; i++) {
  factorial *= i;
}
console.log(n + "! = " + factorial);



//-----------//
// Functions //
//-----------//
console.log("Functions");

// 1. Write a function to check if an array contains a specific number at the
//    first or last position of the array.
function checkForNumber(arr, num) {
  return arr[0] === num || arr[arr.length - 1] === num;
}
// NOTE: all these tests should eventually print true.
console.log(checkForNumber([4, 2, 5, 3], 4) === true);
console.log(checkForNumber([4, 2, 5, 3], 3) === true);
console.log(checkForNumber([4, 2, 5, 3], 2) === false);
console.log(checkForNumber([4, 2, 5, 3], 13) === false);



//-------------------------------------------//
// Object-oriented programming in JavaScript //
//-------------------------------------------//
console.log("Object-oriented programming in JavaScript");

// 1. Add methods to the following object to calculate the circumference
//   and area.

function Triangle(side) {
  this.side = side;
}

// Add methods using prototype:
Triangle.prototype.getCircumference = function() {
  return this.side * 3;
};

Triangle.prototype.getArea = function() {
  return (Math.sqrt(3) / 4) * this.side * this.side;
};

var triangle = new Triangle(5);
console.log("The circumference for the triangle is " + triangle.getCircumference());
console.log("The area for the triangle is " + triangle.getArea());



//---------------------//
// Debugging and tools //
//---------------------//
console.log("Debugging and tools");
// Always use developer tools — makes debugging way easier!



//---------------------------//
// Why should we use arrays? //
//---------------------------//
console.log("Why should we use arrays?");

// 1. Check the weather forecast for the next 5 days and store the expected
//    temperature for each day in a separate variable. Calculate the average
//    temperature and print it to the console.
var day1 = 72, day2 = 75, day3 = 70, day4 = 74, day5 = 73;
var averageTemp = (day1 + day2 + day3 + day4 + day5) / 5;
console.log("Average temperature (variables): " + averageTemp);

// 2. Solve the same problem as in (1) but store the temperatures in an array.
var temps = [72, 75, 70, 74, 73];
var sumTemps = 0;
for (var i = 0; i < temps.length; i++) {
  sumTemps += temps[i];
}
console.log("Average temperature (array): " + (sumTemps / temps.length));

// 3. Suppose you want to look at the forecast for the next 10 days instead of
//    5 days. Is the code for solution (1) or (2) easier to update?
// Definitely arrays — you just add more values and loop through them!



 //----------------------------------//
 // Creating and initializing arrays //
 //----------------------------------//
console.log("Creating and initializing arrays");

var daysOfWeek1 = new Array();
var daysOfWeek2 = new Array(7);
var daysOfWeek3 = new Array("Sunday", "Monday", "Tuesday", "Wednesday",
                            "Thursday", "Friday", "Saturday");
var daysOfWeek4 = [];
var daysOfWeek5 = ["Sunday", "Monday", "Tuesday", "Wednesday",
                   "Thursday", "Friday", "Saturday"];

console.log(daysOfWeek1.length); // 0
console.log(daysOfWeek2.length); // 7
console.log(daysOfWeek3.length); // 7
console.log(daysOfWeek4.length); // 0
console.log(daysOfWeek5.length); // 7

// 2. Is it possible to create an array with just the number 7 in it?
//    How about 7 and 8?
console.log([7]);     // yep, [7]
console.log([7, 8]);  // and yep, [7, 8]

// 3. Which notation do you prefer: new Array() or []?
// I like [] — it’s shorter and cleaner.

// 4. The fibonacci sequence is defined as 0, 1, 1, 2, 3, 5, 8, 13, 21, ...
//    Create an array with the first 25 elements of this sequence.
var fibonacci = [0, 1];
for (var i = 2; i < 25; i++) {
  fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);
}
console.log(fibonacci);



//-----------------//
// Adding elements //
//-----------------//
console.log("Adding elements");

var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// 1. Add 10 to the end of the array.
arr.push(10);

// 2. Add 0 to the beginning of the array.
arr.unshift(0);

// 3. What is the new length of the array? Guess before checking it.
// Should be 11 now.
console.log("Array after adding:", arr);
console.log("New length:", arr.length);



//-------------------//
// Removing elements //
//-------------------//
console.log("Removing elements");

// Use the array from the 'Adding elements' section.

// 1. Remove 10 from the end of the array.
arr.pop();

// 2. Remove 0 from the beginning of the array.
arr.shift();

console.log("Array after removals:", arr);



//-------------------------------------------------------//
// Adding and removing elements from a specific position //
//-------------------------------------------------------//
console.log("Adding and removing elements from a specific position");

// 1. Remove all elements except the first and last elements.
var removedElements = arr.slice(1, arr.length - 1);
arr = [arr[0], arr[arr.length - 1]];
console.log("Array after removing middle elements:", arr);

// 2. Add the removed elements back.
arr.splice(1, 0, ...removedElements);
console.log("Array after adding back elements:", arr);



//---------------------------------------------//
// Two-dimensional and multidimensional arrays //
//---------------------------------------------//
console.log("Two-dimensional and multidimensional arrays");

var arr2d = [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]];

// 1. Calculate the sum of all elements in the 2D array and print it to the console.
var sum = 0;
for (var i = 0; i < arr2d.length; i++) {
  for (var j = 0; j < arr2d[i].length; j++) {
    sum += arr2d[i][j];
  }
}
console.log("Sum of 2D array elements:", sum);



//-----------------------------------------//
// References for JavaScript array methods //
//-----------------------------------------//
console.log("References for JavaScript array methods");

var zero = 0;
var positiveNumbers = [1, 2, 3];
var negativeNumbers = [-3, -2, -1];

// 1. Create an array 'numbers' with all numbers above in order.
var numbers = [zero].concat(positiveNumbers, negativeNumbers);
console.log("All numbers:", numbers);

// 2. Check if every number in the array is less than 10.
var allLessThan10 = numbers.every(function(num) {
  return num < 10;
});
console.log("All numbers less than 10?", allLessThan10);

// 3. Select all non-negative numbers (numbers >= 0) and print the result.
var nonNegative = numbers.filter(function(num) {
  return num >= 0;
});
console.log("Non-negative numbers:", nonNegative);

// 4. Create a new array with all numbers squared and print it to the console.
var squaredNumbers = numbers.map(function(num) {
  return num * num;
});
console.log("Squared numbers:", squaredNumbers);


</script>
</head>
<body>
See Console!
</body>
</html>
